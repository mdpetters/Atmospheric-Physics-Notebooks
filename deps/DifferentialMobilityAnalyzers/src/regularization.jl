# +
# This file handles the regularization for size distribution inversion
#
# Author: Markus Petters (mdpetter@ncsu.edu)
# 	      Department of Marine Earth and Atmospheric Sciences
#         NC State University
#         Raleigh, NC 27605
#
#         April, 2018
#-

# Function to setup the problem
function setupRegularization(ùêÄ, ùêà, B, X‚ÇÄ)
    global Œ® = Regvars(ùêÄ, ùêà, B, X‚ÇÄ)
end

# This function returns the inverted distribution as well as the
# L1 and L2 norms to construct the L-curve. The type of return
# value is optional, to facilitate definition of derivatives
function reginv(Œªs;r = :L1)
    NŒª = Array{Array{Float64}}(undef, 0)
    L1, L2 = Float64[], Float64[]
    for Œª in Œªs
        Nx = inv(Œ®.ùêÄ'*Œ®.ùêÄ + Œª^2.0*Œ®.ùêà)*(Œ®.ùêÄ'*Œ®.B + Œª^2.0*Œ®.X‚ÇÄ)
        push!(L1,norm(Œ®.ùêÄ*Nx - Œ®.B))
        push!(L2,norm(Œ®.ùêà*(Nx - Œ®.X‚ÇÄ)))
        push!(NŒª, Nx)
    end
    if r == :L1
        return L1
    elseif r == :L2
        return L2
    elseif r == :L1L2
        return L1,L2
    elseif r == :NŒª
        return NŒª
    end
end

# Define the functions Œ∑, œÅ and their derivatives. The functions
# are used to compute the curvature of the L-curve as defined in
# Eq.(14) of Hansen (2000)
Œ∑‚Å∞ = Œª -> (log.(reginv(Œª;r= :L2).^2))[1]
œÅ‚Å∞ = Œª -> (log.(reginv(Œª;r= :L1).^2))[1]
Œ∑·µñ  = Œª -> (derivative(Œ∑‚Å∞,Œª))[1]
œÅ·µñ  = Œª -> (derivative(œÅ‚Å∞,Œª))[1]
œÅ¬≤·µñ = Œª -> (second_derivative(œÅ‚Å∞,Œª))[1]
Œ∑¬≤·µñ = Œª -> (second_derivative(Œ∑‚Å∞,Œª))[1]
Œ∫ = Œª -> 2.0*(œÅ·µñ(Œª)*Œ∑¬≤·µñ(Œª) - Œ∑·µñ(Œª)*œÅ¬≤·µñ(Œª))/(œÅ·µñ(Œª)^2.0 + Œ∑·µñ(Œª)^2.0)^1.5

# Compute the L-curve for n points between limits Œª‚ÇÅ and Œª‚ÇÇ
function lcurve(Œª‚ÇÅ::Float64, Œª‚ÇÇ::Float64; n::Int = 10)
    Œªs = 10 .^ range(log10(Œª‚ÇÅ), stop=log10(Œª‚ÇÇ), length=n)
    L1, L2 = reginv(Œªs, r=:L1L2)
    Œ∫s = map(Œª -> Œ∫(Œª), Œªs)
    ii = argmax(Œ∫s)
    if ii == length(Œ∫s)
        ii = ii-1
    elseif ii == 1
        ii = ii+1
    end
    return L1, L2, Œªs[ii-1:ii+1], ii
end

# Find the corner of the L-curve using iterative adjustment of the grid
function lcorner(Œª‚ÇÅ::Float64, Œª‚ÇÇ::Float64; n::Int = 10, r::Int = 3)
    L1,L2,Œªs,ii = lcurve(Œª‚ÇÅ, Œª‚ÇÇ; n = 10)
    for i = 1:r
        L1,L2,Œªs,ii = lcurve(Œªs[1],Œªs[3];n=10)
    end
    return Œªs[2]
end

# Warpper for the regularized inversion
function rinv(R, Œ¥;Œª‚ÇÅ= 1e-2, Œª‚ÇÇ=1e1)
    eyeM = Matrix{Float64}(I, length(R), length(R))
    setupRegularization(Œ¥.ùêÄ,eyeM,R,inv(Œ¥.ùêí)*R) # setup the system
    Œªopt = lcorner(Œª‚ÇÅ,Œª‚ÇÇ;n=10,r=3)                  # compute the optimal Œª
    N =  clean((reginv(Œªopt, r = :NŒª))[1])          # find the inverted size
    return SizeDistribution([],Œ¥.De,Œ¥.Dp,Œ¥.ŒîlnD,N./Œ¥.ŒîlnD,N,:regularized)
end
